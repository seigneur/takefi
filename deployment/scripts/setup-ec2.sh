#!/bin/bash

# TakeFi EC2 Setup Script
# Complete setup for Ubuntu 22.04 LTS on AWS EC2

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
NODE_VERSION="20"
APP_USER="ubuntu"
APP_DIR="/home/ubuntu/takefi"
DOMAIN="takefi.xyz"
EMAIL=${1:-"admin@takefi.xyz"}

echo -e "${BLUE}üöÄ TakeFi EC2 Setup${NC}"
echo -e "${BLUE}Domain: $DOMAIN${NC}"
echo -e "${BLUE}App Directory: $APP_DIR${NC}"
echo "=================================="

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}‚ùå This script must be run as root${NC}"
    echo -e "${YELLOW}üí° Run with: sudo $0 [email]${NC}"
    exit 1
fi

# Update system packages
echo -e "${YELLOW}üì¶ Updating system packages...${NC}"
apt-get update
apt-get upgrade -y

# Install essential packages
echo -e "${YELLOW}üì¶ Installing essential packages...${NC}"
apt-get install -y \
    curl \
    wget \
    git \
    unzip \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    build-essential \
    python3-pip \
    ufw \
    htop \
    tree \
    jq

# Install Node.js
echo -e "${YELLOW}üì¶ Installing Node.js $NODE_VERSION...${NC}"
curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -
apt-get install -y nodejs

# Verify Node.js installation
node_version=$(node --version)
npm_version=$(npm --version)
echo -e "${GREEN}‚úÖ Node.js $node_version installed${NC}"
echo -e "${GREEN}‚úÖ npm $npm_version installed${NC}"

# Install PM2 globally
echo -e "${YELLOW}üì¶ Installing PM2...${NC}"
npm install -g pm2

# Install Nginx
echo -e "${YELLOW}üì¶ Installing Nginx...${NC}"
apt-get install -y nginx

# Install Certbot
echo -e "${YELLOW}üì¶ Installing Certbot...${NC}"
apt-get install -y certbot python3-certbot-nginx

# Configure firewall
echo -e "${YELLOW}üî• Configuring firewall...${NC}"
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw --force enable

echo -e "${GREEN}‚úÖ Firewall configured${NC}"
ufw status

# Create app directory if it doesn't exist
if [ ! -d "$APP_DIR" ]; then
    echo -e "${YELLOW}üìÅ Creating app directory...${NC}"
    mkdir -p $APP_DIR
    chown $APP_USER:$APP_USER $APP_DIR
fi

# Check if repository is already cloned
if [ ! -d "$APP_DIR/.git" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  TakeFi repository not found in $APP_DIR${NC}"
    echo -e "${YELLOW}üí° Please clone the repository manually:${NC}"
    echo "sudo -u $APP_USER git clone <your-repo-url> $APP_DIR"
    echo ""
    echo -e "${YELLOW}üìù Or if uploading files, ensure they are in $APP_DIR${NC}"
else
    echo -e "${GREEN}‚úÖ TakeFi repository found${NC}"
fi

# Set up log directories
echo -e "${YELLOW}üìÅ Setting up log directories...${NC}"
mkdir -p $APP_DIR/logs
chown -R $APP_USER:$APP_USER $APP_DIR/logs

# Create systemd service for PM2
echo -e "${YELLOW}‚öôÔ∏è  Setting up PM2 startup service...${NC}"
sudo -u $APP_USER pm2 startup systemd -u $APP_USER --hp /home/$APP_USER
pm2 startup systemd -u $APP_USER --hp /home/$APP_USER

# Create environment file template
echo -e "${YELLOW}üìù Creating environment template...${NC}"
cat > $APP_DIR/.env.production << EOF
# TakeFi Production Environment
# Generated by setup script

# Oracle Backend
ORACLE_NODE_ENV=production
ORACLE_PORT=3001
ORACLE_AWS_REGION=us-east-1
ORACLE_BITCOIN_NETWORK=testnet
ORACLE_MAX_BTC_AMOUNT=100000000
ORACLE_DEFAULT_TIMELOCK=144
ORACLE_API_RATE_LIMIT=1000
ORACLE_CORS_ORIGIN=https://takefi.xyz
ORACLE_LOG_LEVEL=info

# MM Server
MM_NODE_ENV=production
MM_PORT=3000
MM_CHAIN_ID=11155111
MM_CORS_ORIGINS=https://takefi.xyz
MM_API_KEY=CHANGE_ME_$(openssl rand -hex 32)
MM_ALLOWED_FRONTEND_ORIGIN=https://takefi.xyz

# Frontend
NEXT_PUBLIC_API_URL=https://takefi.xyz
NEXT_PUBLIC_ORACLE_API_URL=https://takefi.xyz/api/oracle
NEXT_PUBLIC_MM_API_URL=https://takefi.xyz/api/mm

# Database (if needed)
REDIS_URL=redis://localhost:6379

# Monitoring
LOG_LEVEL=info
ENABLE_METRICS=true
EOF

chown $APP_USER:$APP_USER $APP_DIR/.env.production

# Install Redis (optional for caching)
echo -e "${YELLOW}üì¶ Installing Redis...${NC}"
apt-get install -y redis-server
systemctl enable redis-server
systemctl start redis-server

# Configure system limits for Node.js
echo -e "${YELLOW}‚öôÔ∏è  Configuring system limits...${NC}"
cat >> /etc/security/limits.conf << EOF

# TakeFi Node.js limits
$APP_USER soft nofile 65536
$APP_USER hard nofile 65536
$APP_USER soft nproc 4096
$APP_USER hard nproc 4096
EOF

# Configure sysctl for better performance
cat >> /etc/sysctl.conf << EOF

# TakeFi performance tuning
net.core.somaxconn = 65535
net.ipv4.tcp_max_tw_buckets = 1440000
net.ipv4.ip_local_port_range = 5000 65000
net.ipv4.tcp_fin_timeout = 15
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_max_syn_backlog = 3240000
EOF

sysctl -p

# Create deployment helper script
echo -e "${YELLOW}üìú Creating deployment helper script...${NC}"
cat > /usr/local/bin/takefi-deploy << 'EOF'
#!/bin/bash

# TakeFi Deployment Helper
APP_DIR="/home/ubuntu/takefi"
APP_USER="ubuntu"

echo "üöÄ TakeFi Deployment Helper"
echo "=========================="

case "$1" in
    "start")
        echo "Starting TakeFi services..."
        cd $APP_DIR && sudo -u $APP_USER ./deployment/scripts/deploy-backends.sh production
        ;;
    "stop")
        echo "Stopping TakeFi services..."
        sudo -u $APP_USER pm2 stop all
        ;;
    "restart")
        echo "Restarting TakeFi services..."
        sudo -u $APP_USER pm2 restart all
        ;;
    "status")
        echo "TakeFi service status:"
        sudo -u $APP_USER pm2 status
        echo ""
        echo "Nginx status:"
        systemctl status nginx --no-pager -l
        ;;
    "logs")
        echo "TakeFi logs:"
        sudo -u $APP_USER pm2 logs
        ;;
    "health")
        echo "Health checks:"
        curl -s http://localhost:3001/health || echo "Oracle Backend: DOWN"
        curl -s http://localhost:3000/health || echo "MM Server: DOWN"
        curl -s http://localhost:3002/health || echo "Frontend: DOWN"
        ;;
    "ssl")
        echo "Setting up SSL..."
        /home/ubuntu/takefi/deployment/scripts/setup-ssl.sh $2
        ;;
    "update")
        echo "Updating TakeFi services..."
        $APP_DIR/deployment/scripts/update-service.sh $2
        ;;
    *)
        echo "Usage: takefi-deploy {start|stop|restart|status|logs|health|ssl|update}"
        echo ""
        echo "Commands:"
        echo "  start   - Start all TakeFi services"
        echo "  stop    - Stop all TakeFi services"
        echo "  restart - Restart all TakeFi services"
        echo "  status  - Show service status"
        echo "  logs    - Show service logs"
        echo "  health  - Check service health"
        echo "  ssl     - Setup SSL certificates"
        echo "  update  - Update services (all|frontend|oracle|mm-server)"
        ;;
esac
EOF

chmod +x /usr/local/bin/takefi-deploy

# Set up log rotation
echo -e "${YELLOW}üìú Setting up log rotation...${NC}"
cat > /etc/logrotate.d/takefi << EOF
$APP_DIR/logs/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    notifempty
    create 644 $APP_USER $APP_USER
    postrotate
        sudo -u $APP_USER pm2 reloadLogs
    endscript
}
EOF

# Set up monitoring script
echo -e "${YELLOW}üìä Setting up monitoring...${NC}"
cat > /usr/local/bin/takefi-monitor << 'EOF'
#!/bin/bash

# TakeFi Service Monitor
APP_USER="ubuntu"

check_service() {
    local service=$1
    local port=$2
    local name=$3
    
    if curl -sf http://localhost:$port/health > /dev/null 2>&1; then
        echo "‚úÖ $name is healthy"
        return 0
    else
        echo "‚ùå $name is down"
        return 1
    fi
}

echo "üîç TakeFi Service Monitor - $(date)"
echo "=================================="

# Check services
check_service "oracle" 3001 "Oracle Backend"
oracle_status=$?

check_service "mm" 3000 "MM Server" 
mm_status=$?

# Check PM2 processes
echo ""
echo "üìä PM2 Status:"
sudo -u $APP_USER pm2 jlist | jq -r '.[] | "\(.name): \(.pm2_env.status)"'

# Check system resources
echo ""
echo "üíª System Resources:"
echo "Memory: $(free -h | awk '/^Mem:/ {print $3 "/" $2}')"
echo "Disk: $(df -h / | awk 'NR==2 {print $3 "/" $2 " (" $5 " used)"}')"
echo "Load: $(uptime | awk -F'load average:' '{print $2}')"

# Restart services if they're down
if [ $oracle_status -ne 0 ] || [ $mm_status -ne 0 ]; then
    echo ""
    echo "üîÑ Restarting failed services..."
    sudo -u $APP_USER pm2 restart all
fi
EOF

chmod +x /usr/local/bin/takefi-monitor

# Add monitoring cron job
echo -e "${YELLOW}‚è∞ Setting up monitoring cron job...${NC}"
cat > /etc/cron.d/takefi-monitor << EOF
# TakeFi Service Monitoring
# Check services every 5 minutes
*/5 * * * * root /usr/local/bin/takefi-monitor >> /var/log/takefi-monitor.log 2>&1
EOF

echo ""
echo -e "${GREEN}üéâ EC2 setup completed successfully!${NC}"
echo "=================================="
echo -e "${BLUE}Next steps:${NC}"
echo "1. Clone/upload TakeFi code to $APP_DIR"
echo "2. Configure environment variables in $APP_DIR/.env.production"
echo "3. Run: takefi-deploy start"
echo "4. Run: takefi-deploy ssl $EMAIL"
echo "5. Update DNS records to point to this server"
echo ""
echo -e "${BLUE}Useful commands:${NC}"
echo "‚Ä¢ takefi-deploy status  - Check service status"
echo "‚Ä¢ takefi-deploy logs    - View service logs"
echo "‚Ä¢ takefi-monitor        - Check service health"
echo ""
echo -e "${YELLOW}üìù Don't forget to:${NC}"
echo "‚Ä¢ Configure AWS credentials for Oracle Backend"
echo "‚Ä¢ Set up your Bitcoin RPC connection"
echo "‚Ä¢ Configure wallet private keys securely"
echo "‚Ä¢ Point takefi.xyz DNS to this server IP"